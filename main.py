# -*- coding: utf-8 -*-
import asyncio
import re

from bot_init import *
from help import *
from pygsheetsApi import *
from work_at_schedule import scheduleStart

loop = asyncio.get_event_loop()
dispatcher = Dispatcher(bot, loop=loop)
adminUserNik2Dub = 451589191


@dispatcher.message_handler(commands=['start'])
async def send_start(msg: types.Message):
    await Log(msg)
    await msg.answer(f'–Ø –±–æ—Ç. –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {msg.from_user.full_name}')


@dispatcher.message_handler(commands=['help'])
async def send_help(msg: types.Message):
    await Log(msg)

    await msg.answer(f"üí¨/subscribe_day - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π (–≤ 20:00) "
                     f"–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.\n"
                     f"–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.")

    await msg.answer(f"üí¨'/subscribe_less –•' - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä–µ –∑–∞ –• –º–∏–Ω—É—Ç –¥–æ "
                     f"–µ—ë –Ω–∞—á–∞–ª–∞.\n"
                     f"–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.")

    await msg.answer(f"üí¨/schedule_now - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.")
    await msg.answer(f"üí¨/schedule_tomorrow - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.")
    await msg.answer(f"üí¨'/schedule_teacher x y z' - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.\n"
                     f"x - –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏(1-7)\n"
                     f"y - –ù–µ–¥–µ–ª—è(1 - –±–µ–ª–∞—è, 2 - –∑–µ–ª–µ–Ω–∞—è)\n"
                     f"z - –§–∞–º–∏–ª–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è(–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤—å—Ç–µ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)\n"
                     f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                     f"/schedule_teacher 1 1 –°–∫—É–∫–æ–≤—Å–∫–∞—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞\n"
                     f"/schedule_teacher 4 2 –î—å—è–∫–æ–≤–∞")
    await msg.answer(f"üí¨'/schedule_group x y z' - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.\n"
                     f"x - –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏(1-7)\n"
                     f"y - –ù–µ–¥–µ–ª—è(1 - –±–µ–ª–∞—è, 2 - –∑–µ–ª–µ–Ω–∞—è)\n"
                     f"z - –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n"
                     f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                     f"/schedule_group 1 1 20-–ú–°\n"
                     f"/schedule_group 4 2 19-–ò–¢-3")

    if IsAdminCheck(msg) or isStudent(msg.from_user.id):
        await msg.answer("üí¨/registration - –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º"
                         " –ø–æ–¥–≥—Ä—É–ø–ø—ã.\n"
                         "–ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
                         "/registration 20-–ò–¢-1 1\n\n"
                         "/registration 20-–ú–° 2")

    if IsAdminCheck(msg) or IsTeacher(msg.from_user.id):
        await msg.answer("üí¨/notify - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
                         "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ t, –≤—Å–µ–º - all. "
                         "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏–ª–∏ –ø–æ—Ç–æ–∫—É —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ "
                         "–≥—Ä—É–ø–ø—ã/–≥—Ä—É–ø–ø –∏–ª–∏ –ø–æ—Ç–æ–∫–∞/–ø–æ—Ç–æ–∫–æ–≤.\n"
                         "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                         "'20', '20-–∏—Ç', '20-–∏—Ç-1' –∏–ª–∏ –∂–µ –ø–µ—Ä–µ—á–µ–Ω—å –≥—Ä—É–ø–ø/–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ - '20-–∏—Ç 21-–≤—Å 19-–º—Å 21-–∏—Ç-1'\n "
                         "–ù–∞ —Ç—Ä–µ—Ç–µ–π —Å—Ç—Ä–æ–∫–µ –ø–∏—à–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
                         "–ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
                         "/notify\n"
                         "20-–ò–¢ 19 18-–∏—Ç-2\n"
                         "–ó–∞–≤—Ç—Ä–∞ –≤ 13:50 –≤—Å—Ç—Ä–µ—á–∞ –≤ –∞–∫—Ç–æ–≤–æ–º –∑–∞–ª–µ!\n")

        await msg.answer(f"üí¨/write - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –≤ –æ–Ω–ª–∞–π–Ω —Ç–∞–±–ª–∏—Ü—É")

    if IsAdminCheck(msg) or IsOlder(msg.from_user.id):
        await msg.answer("–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–∞ (—É - –ø—Ä–æ–ø—É—Å–∫ –ø–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ): \n\n"
                         "\tüí¨/visit\n"
                         "\t–ò–≤–∞–Ω–æ–≤\n"
                         "\t–ü–µ—Ç—Ä–æ–≤ —É\n"
                         "\t. . . . . . . . . . . . . . . . . . . . .\n"
                         "\t–°–∏–¥–æ—Ä–æ–≤\n")


@dispatcher.message_handler(commands=['visit'])
async def send_visit(msg: types.Message):
    await Log(msg)

    if not IsOlder(msg.from_user.id):
        await msg.answer(f'–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ —Å—Ç–∞—Ä–æ—Å—Ç, –ø–æ—ç—Ç–æ–º—É –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö!')
        return

    group = getOlderGroup(msg.from_user.id).fetchone()

    timeMSG = msg.date.strftime("%H:%M")
    if timeInRange("09:00", timeMSG, "18:20"):
        await msg.answer('–°–µ–π—á–∞—Å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö, –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å 9:00 –ø–æ 18:20!')
        return

    date = datetime.datetime.now().strftime("%d.%m.%Y")
    if checkFileToRepeat(addGroup=group, addDate=date, addTime=timeMSG):
        await msg.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç—Å—Ç—É—Ç—Å–≤—É—é—â–∏—Ö –Ω–∞ —ç—Ç–æ–π –ø–∞—Ä–µ!")
        return

    message = msg.text.splitlines()
    students_to_print = "\n".join(sorted(message[1:]))
    if len(message) == 1:
        await msg.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!(/help)')

    dateStartPair = timeParse(timeMSG)
    dataSet(msg.from_user.id, timeMSG, students_to_print, date)

    await msg.answer(f'–ü–æ–ª—É—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n'
                     f'–ì—Ä—É–ø–ø–∞ - {group}\n'
                     f'–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ - {timeMSG}\n'
                     f'–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã -{dateStartPair}\n'
                     f'–î–∞—Ç–∞ - {date}\n'
                     f"–û—Ç—Å—É—Ç–≤—É—é—â–∏–µ - \n{students_to_print}\n")


@dispatcher.message_handler(commands=['registration'])
async def send_registration(msg: types.Message):
    await Log(msg)
    if not isStudent(msg.from_user.id):
        await msg.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º!')
        return

    # noinspection PyBroadException
    try:
        if len(msg.text.upper().split()) == 3:
            groupname = msg.text.upper().split()[1]
            subgroup = int(msg.text.upper().split()[2])
            test = re.match(r'\d{2}-[–∞-—è–ê-–Ø]{2,3}(-\d)?', groupname.strip())
            if test and test.regs[0][1] == len(groupname.strip()) and (subgroup == 1 or subgroup == 2):
                groupIs = getGroupByName(groupname)
                if groupIs.rowcount == 0:
                    createGroup(groupname)
                groupIs = getGroupByName(groupname).fetchone()

                setGroupForUser(msg.from_user.id, groupIs[0], subgroup)
                await msg.answer(f'–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã {groupname} –ø–æ–¥–≥—Ä—É–ø–ø–∞ {subgroup}.')
                return
        await msg.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!(/help)')
    except BaseException:
        await msg.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!(/help)')


@dispatcher.message_handler(commands=['write'])
async def send_write(msg: types.Message):
    await Log(msg)
    if IsAdminCheck(msg) or IsTeacher(msg.from_user.id):
        await msg.answer("–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞—á–∞—Ç–∞ ‚ñ∂Ô∏è")
        pygsheetsWrite()
        await msg.reply("–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É ‚èπ")
    else:
        await msg.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ!")


@dispatcher.message_handler(commands=['notify'])
async def send_notify(msg: types.Message):
    await Log(msg)
    if IsAdminCheck(msg) or IsTeacher(msg.from_user.id):
        # noinspection PyBroadException
        try:
            strArray = msg.text.splitlines()
            strgourps = strArray[1].split()
            if len(strArray) >= 3:
                if strArray[1].lower() == 'all':
                    for item in getUserTid().fetchall():
                        await bot.send_message(item[0], " ".join(strArray[2::]) + f"\n@{msg.from_user.username}")
                elif strArray[1].lower() == 't':
                    for item in getUserTeacher().fetchall():
                        await bot.send_message(item[0], " ".join(strArray[2::]) + f"\n@{msg.from_user.username}")
                elif len(strgourps) > 1:
                    for groupI in strgourps:
                        for item in getUserByStartGroup(groupI).fetchall():
                            await bot.send_message(item[0], " ".join(strArray[2::]) + f"\n@{msg.from_user.username}")
                else:
                    for item in getUserByStartGroup(strArray[1]).fetchall():
                        await bot.send_message(item[0], " ".join(strArray[2::]) + f"\n@{msg.from_user.username}")
            else:
                await msg.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!(/help)')

        except BaseException:
            await msg.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!(/help)')

    else:
        await msg.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ!")


@dispatcher.message_handler(commands=['subscribe_day'])
async def subscribe_day(msg: types.Message):
    await Log(msg)

    if getUserGroupByTid(msg.from_user.id).fetchone()[0] is None and isStudent(msg.from_user.id):
        await msg.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/registration)!")
        return

    if subToDay(msg.from_user.id):
        await msg.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.")
    else:
        await msg.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


@dispatcher.message_handler(commands=['subscribe_less'])
async def subscribe_less(msg: types.Message):
    await Log(msg)

    if getUserGroupByTid(msg.from_user.id).fetchone()[0] is None and isStudent(msg.from_user.id):
        await msg.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (/registration)!")
        return

    # noinspection PyBroadException
    try:
        time = msg.text.split()[1]
        if subToLess(msg.from_user.id, time):
            await msg.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞—Ä–µ –∑–∞ {time} –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.")
        else:
            await msg.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞—Ä–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except BaseException:
        await msg.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!(/help)')


@dispatcher.message_handler(commands=['schedule_now'])
async def getNowSchedule(msg: types.Message):
    await Log(msg)
    await sendScheduleDayNow(0, msg.from_user.id)


@dispatcher.message_handler(commands=['schedule_tomorrow'])
async def getNowSchedule(msg: types.Message):
    await Log(msg)
    await sendScheduleDayNow(1, msg.from_user.id)


@dispatcher.message_handler(commands=['schedule_teacher'])
async def getTeacherSchedule(msg: types.Message):
    await Log(msg)
    try:
        strParse = msg.text.split()
        if len(strParse) >= 4:
            await sendScheduleByTeacher(strParse[3:], strParse[1], msg.from_user.id, int(strParse[2]))
        else:
            await msg.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!(/help)')
    except BaseException:
        await msg.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!(/help)')


@dispatcher.message_handler(commands=['schedule_group'])
async def getGroupSchedule(msg: types.Message):
    await Log(msg)
    try:
        strParse = msg.text.split()
        if len(strParse) == 4:
            await sendScheduleByGroup(strParse[3].upper(), strParse[1], msg.from_user.id, int(strParse[2]))
        else:
            await msg.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!(/help)')
    except BaseException:
        await msg.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!(/help)')


@dispatcher.message_handler(content_types=['text'])
async def get_text_messages(msg: types.Message):
    await Log(msg)
    if msg.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        await msg.answer('–ü—Ä–∏–≤–µ—Ç!')
    elif msg.text.lower() == "–æ—Ö–∞—ë":
        await msg.answer("–ö–æ–Ω–∏—Ü–∏–≤–∞–∞–∞–∞–∞!ü•∞")
    elif msg.text.lower() == "–∞–Ω–∏–º–µ":
        await msg.answer("–î–ª—è –¥–µ–±–∏–ª–æ–≤!üëå")
    elif msg.text.lower() == "–∫–∞–∫ –¥–µ–ª–∞?":
        await msg.answer("–ª—É—á—à–µ —á–µ–º —É —Ç–µ–±—èüòú")
    else:
        await msg.answer('–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã —è –µ—â–µ –Ω–µ –∏–∑—É—á–∏–ªüòû')


async def Log(msg):
    # noinspection PyBroadException
    try:
        print(f'{msg.date}  {msg.from_user.username} {msg.from_user.full_name} {msg.text}')
    except Exception:
        await bot.send_message(adminUserNik2Dub, msg.text + "\n" + msg.from_user.id.__str__()+"\n"+msg.from_user.username+"\n"+msg.from_user.full_name)
        print(f'{msg.date}  {msg.from_user.username} {msg.from_user.full_name}')

    userTid = getUserByTid(msg.from_user.id).fetchone()
    if userTid is None:
        await admin_set_role(msg.from_user)
        createUser(msg.from_user)
    userTid = getUserByTid(msg.from_user.id).fetchone()

    if msg.text.split()[0].startswith('/'):
        if len(msg.text.split()) > 1:
            LogInfo(msg.date.strftime("%Y-%m-%d %I:%M:%S %p"), userTid[0], msg.text.split()[0],
                    " ".join(msg.text.split()[1::]))
        else:
            LogInfo(msg.date.strftime("%Y-%m-%d %I:%M:%S %p"), userTid[0], msg.text, "")
    else:
        LogInfo(msg.date.strftime("%Y-%m-%d %I:%M:%S %p"), userTid[0], "0", msg.text)


async def admin_set_role(user):
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="set_admin"))
    keyboard.add(types.InlineKeyboardButton(text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="set_teacher"))
    keyboard.add(types.InlineKeyboardButton(text="–°—Ç–∞—Ä–æ—Å—Ç–∞", callback_data="set_older"))
    await bot.send_message(adminUserNik2Dub, f"\n{user.id} {user.username} {user.full_name}", reply_markup=keyboard)


@dispatcher.callback_query_handler(text="set_admin")
async def set_admin(call: types.CallbackQuery):
    adminSQL_setRollAsAdmin(call.message.text.split()[0])
    await call.message.answer(call.message.text + ' \n<b>—Å–¥–µ–ª–∞–ª–∏ –∞–¥–º–∏–Ω–æ–º</b>', parse_mode=types.ParseMode.HTML)


@dispatcher.callback_query_handler(text="set_teacher")
async def set_teacher(call: types.CallbackQuery):
    adminSQL_setRollAsTeacher(call.message.text.split()[0])
    await call.message.answer(call.message.text + ' \n<b>—Å–¥–µ–ª–∞–ª–∏ –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª–µ–º</b>', parse_mode=types.ParseMode.HTML)


@dispatcher.callback_query_handler(text="set_older")
async def set_older(call: types.CallbackQuery):
    adminSQL_setRollAsOlder(call.message.text.split()[0])
    await call.message.answer(call.message.text + ' \n<b>—Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞—Ä–æ—Å—Ç–æ–π</b>', parse_mode=types.ParseMode.HTML)


async def set_default_commands(dp: Dispatcher):
    await dp.bot.set_my_commands([
        types.BotCommand("start", 'üü© –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º'),
        types.BotCommand("help", "üü© –û–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"),
        types.BotCommand("registration", "üü© –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        types.BotCommand("subscribe_day", "üü© –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
        types.BotCommand("subscribe_less", "üü© –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–∞—Ä–æ–π"),
        types.BotCommand("schedule_now", "üü© –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
        types.BotCommand("schedule_tomorrow", "üü© –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
        types.BotCommand("schedule_teacher", "üü© –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"),
        types.BotCommand("schedule_group", "üü© –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"),
        types.BotCommand("visit", 'üü® –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏'),
        types.BotCommand("write", "üüß –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –æ–Ω–ª–∞–π–Ω —Ç–∞–±–ª–∏—Ü—É"),
        types.BotCommand("notify", "üüß –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
    ])

    asyncio.create_task(scheduleStart())

if __name__ == '__main__':
    executor.start_polling(dispatcher, on_startup=set_default_commands)
