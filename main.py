# import sqlite3
import threading
from work_at_schedule import scheduleStart
from aiogram import *
from help import *
from pygsheetsApi import *

bot = Bot(token="1965454446:AAHxZEz1xwDGs0AUDMzt3ik6dYx36e_2BPA")
dp = Dispatcher(bot)


# conn = sqlite3.connect("Bot_DB.db")


@dp.message_handler(commands=['start'])
async def send_start(msg: types.Message):
    print(msg.from_user.full_name + "\n" + msg.text + "\n")
    await msg.answer(f'–Ø –±–æ—Ç. –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {msg.from_user.full_name}')


@dp.message_handler(commands=['help'])
async def send_help(msg: types.Message):
    print(msg.from_user.full_name + "\n" + msg.text + "\n")
    await msg.answer(f'–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–∞(—É - –µ—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è): \n'
                     f'\t/visit\n'
                     f'\t–ò–≤–∞–Ω–æ–≤\n'
                     f'\t–ü–µ—Ç—Ä–æ–≤ —É\n'
                     f'\t. . . . . . . . . . . . . . . . . . . . .\n'
                     f'\t–°–∏–¥–æ—Ä–æ–≤\n')


@dp.message_handler(commands=['visit'])
async def send_visit(msg: types.Message):
    print(f"{msg.from_user.full_name} {msg.from_user.username}\n{msg.text}\n")

    fileWithNameGroup = open("Data/name by group.txt", "r", 256, "utf-8")
    elderByGroup = fileWithNameGroup.readlines()
    fileWithNameGroup.close()

    group = ""
    for elder in elderByGroup:
        if elder.lower().find(msg.from_user.username.lower()) != -1:
            group = elder.replace("\n", "").split()[1]
    if group == "":
        await msg.answer(f'–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ —Å—Ç–∞—Ä–æ—Å—Ç, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö')
        return

    timeMSG = msg.date.strftime("%H:%M")
    if timeInRange("09:00", timeMSG, "18:20"):
        await msg.answer('–°–µ–π—á–∞—Å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö, –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å 9:00 –ø–æ 18:20')
        return

    date = datetime.datetime.now().strftime("%d.%m.%Y")
    if checkFileToRepeat(addGroup=group, addDate=date, addTime=timeMSG):
        await msg.answer('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç—Å—Ç—É—Ç—Å–≤—É—é—â–∏—Ö –Ω–∞ —ç—Ç–æ–π –ø–∞—Ä–µ')
        return

    message = msg.text.splitlines()
    students_to_print = "\n".join(sorted(message[1:]))
    if len(message) == 1:
        return await msg.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–µ —Å–æ–±–ª—é–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è(/help)")
    dateStartPair = timeParse(timeMSG)
    await msg.answer(f'–ü–æ–ª—É—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n'
                     f'–ì—Ä—É–ø–ø–∞ - {group}\n'
                     f'–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ - {timeMSG}\n'
                     f'–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã -{dateStartPair}\n'
                     f'–î–∞—Ç–∞ - {date}\n'
                     f"–û—Ç—Å—É—Ç–≤—É—é—â–∏–µ - \n{students_to_print}\n")

    with open('Data/data.txt', "a", 256, "utf-8") as file:
        file.write(
            f'{group}\n{timeMSG}\n{date}\n{students_to_print}\n|\n')


# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ä–æ—Å—Ç
@dp.message_handler(commands=['registration'])
async def send_registration(msg: types.Message):
    if IsAdminCheck(msg):
        print(f"/registration {msg.from_user.username} {msg.text.upper().split()[1]} {msg.from_user.full_name}\n")

        await msg.answer(f"–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã {msg.text.upper().split()[1]}")

        with open('name by group.txt', "a", 256, "utf-8") as file:
            file.write(
                f'{msg.from_user.username} {msg.text.upper().split()[1]} {msg.from_user.full_name}\n')
    else:
        await msg.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É")


@dp.message_handler(commands=['write'])
async def send_write(msg: types.Message):
    if IsAdminCheck(msg):
        await msg.answer("–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É –Ω–∞—á–∞–ª–∞—Å—å ‚ñ∂Ô∏è")
        pygsheetsWrite()
        await msg.reply("–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É ‚èπ")
    else:
        await msg.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É")


async def set_default_commands(dp):
    await dp.bot.set_my_commands([
        types.BotCommand("start", "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"),
        types.BotCommand("help", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"),
        types.BotCommand("visit", "–ö–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏"),
        types.BotCommand("registration",
                         "–ö–æ–º–∞–Ω–¥–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã"),
    ])


@dp.message_handler(content_types=['text'])
async def get_text_messages(msg: types.Message):
    if msg.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        await msg.answer('–ü—Ä–∏–≤–µ—Ç!')
    elif msg.text.lower() == "–æ—Ö–∞—ë":
        await msg.answer("–ö–æ–Ω–∏—Ü–∏–≤–∞–∞–∞–∞–∞!ü•∞")
    else:
        await msg.answer('–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã —è –µ—â–µ –Ω–µ –∏–∑—É—á–∏–ªüòû')


if __name__ == '__main__':
    threading.Thread(target=scheduleStart).start()
    executor.start_polling(dp, on_startup=set_default_commands)
